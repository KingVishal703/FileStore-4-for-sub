#
# Copyright (C) 2025 by Codeflix-Bots
# Released under MIT License
#

from pyrogram import filters
from bot import Bot
from config import *
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database.database import (
    add_user, del_user, full_userbase, present_user,
    db_set_pending_plan, db_get_pending_plan, db_clear_pending_plan,
    db_set_premium_expiry, db_set_payment_pending, db_is_payment_pending
)
from time import time

# ---------- Plans Keyboard ----------
plans_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚Çπ10 - 7 ‡§¶‡§ø‡§®", callback_data="plan_10")],
    [InlineKeyboardButton("‚Çπ30 - 30 ‡§¶‡§ø‡§®", callback_data="plan_30")],
    [InlineKeyboardButton("‚Çπ60 - 90 ‡§¶‡§ø‡§®", callback_data="plan_60")]
])

# ---------- Main Callback Handler ----------
@Bot.on_callback_query()
async def callback_handler(client: Bot, query: CallbackQuery):
    data = query.data
    user_id = query.from_user.id

    # --- Help / About / Start / Close ---
    if data == "help":
        await query.message.edit_text(
            text=HELP_TXT.format(first=query.from_user.first_name),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(" ú·¥è·¥ç·¥á", callback_data="start"),
                 InlineKeyboardButton("·¥Ñ ü·¥èÍú±·¥á", callback_data="close")]
            ])
        )

    elif data == "about":
        await query.message.edit_text(
            text=ABOUT_TXT.format(first=query.from_user.first_name),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(" ú·¥è·¥ç·¥á", callback_data="start"),
                 InlineKeyboardButton("·¥Ñ ü·¥èÍú±·¥á", callback_data="close")]
            ])
        )

    elif data == "start":
        await query.message.edit_text(
            text=START_MSG.format(first=query.from_user.first_name),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(" ú·¥á ü·¥ò", callback_data="help"),
                 InlineKeyboardButton("·¥Ä ô·¥è·¥ú·¥õ", callback_data="about")]
            ])
        )

    elif data == "close":
        await query.message.delete()
        try:
            await query.message.reply_to_message.delete()
        except:
            pass

    # --- Plan Selection ---
    elif data == "choose_plan":
        await query.message.edit_text("‡§™‡•ç‡§≤‡§æ‡§® ‡§ö‡•Å‡§®‡•á‡§Ç:", reply_markup=plans_keyboard)

    elif data.startswith("plan_"):
        plan = data.split("_")[1]
        await db_set_pending_plan(user_id, plan)

        text = (
            f"‡§Ü‡§™‡§®‡•á ‚Çπ{plan} ‡§µ‡§æ‡§≤‡§æ ‡§™‡•ç‡§≤‡§æ‡§® ‡§ö‡•Å‡§®‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è UPI ID ‡§Ø‡§æ QR Code ‡§∏‡•á payment ‡§ï‡§∞‡•á‡§Ç:\n\n"
            f"üí≥ UPI ID: <code>{UPI_ID}</code>\n"
            f"üñº QR Code: {QR_CODE_URL}\n\n"
            "Payment ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§®‡•Ä‡§ö‡•á 'Payment Confirm' ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§è‡§Ç‡•§"
        )
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ Payment Confirm", callback_data=f"user_confirm_{plan}")],
            [InlineKeyboardButton("üîô Back", callback_data="choose_plan")]
        ])
        await query.message.edit_text(text, reply_markup=buttons)

    elif data.startswith("user_confirm_"):
        # Payment proof upload option
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì§ Send Screenshot", callback_data="send_proof")],
            [InlineKeyboardButton("üîô Back", callback_data="choose_plan")]
        ])
        await query.message.edit_text(
            "‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§¨‡§ü‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§´‡§ø‡§∞ ‡§Ö‡§™‡§®‡§æ payment screenshot ‡§Ø‡§æ UTR ID ‡§≠‡•á‡§ú‡•á‡§Ç, ‡§ú‡§ø‡§∏‡•á admin verify ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§",
            reply_markup=buttons
        )

    elif data == "send_proof":
        # Set payment pending state
        await db_set_payment_pending(user_id, True)
        await query.answer("‡§Ö‡§¨ payment screenshot ‡§Ø‡§æ UTR ID ‡§≠‡•á‡§ú‡•á‡§Ç‡•§", show_alert=True)
        await query.message.reply("‡§Ö‡§¨ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ payment screenshot ‡§Ø‡§æ UTR ID ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")

    elif data == "back_to_plan":
        await query.message.edit_text("‡§™‡•ç‡§≤‡§æ‡§® ‡§ö‡•Å‡§®‡•á‡§Ç:", reply_markup=plans_keyboard)

    # --- Admin Confirm / Reject ---
    elif data.startswith("confirm_") or data.startswith("reject_"):
        target_user = int(data.split("_")[1])

        if data.startswith("confirm_"):
            plan = await db_get_pending_plan(target_user)
            if not plan:
                await query.answer("User ‡§ï‡§æ ‡§ï‡•ã‡§à pending plan ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§", show_alert=True)
                return
            expires = int(time()) + PREMIUM_DURATION.get(plan, 7 * 86400)
            await db_set_premium_expiry(target_user, expires)
            await db_clear_pending_plan(target_user)
            await query.answer("‚úÖ User ‡§ï‡§æ ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§ï‡§®‡•ç‡§´‡§∞‡•ç‡§Æ ‡§π‡•ã ‡§ó‡§Ø‡§æ!", show_alert=True)
            await query.edit_message_reply_markup(None)
            await client.send_message(
                target_user,
                f"üéâ ‡§Ü‡§™‡§ï‡§æ ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à {PREMIUM_DURATION.get(plan)//86400} ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è‡•§"
            )

        elif data.startswith("reject_"):
            await db_clear_pending_plan(target_user)
            await query.answer("‚ùå Payment proof reject ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§", show_alert=True)
            await query.edit_message_reply_markup(None)
            await client.send_message(
                target_user,
                "‚ùå ‡§Ü‡§™‡§ï‡§æ ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ ‡§®‡§Ø‡§æ ‡§™‡•ç‡§≤‡§æ‡§® ‡§ö‡•Å‡§®‡•á‡§Ç", callback_data="choose_plan")]
                ])
            )

# ---------- Payment Proof Handler ----------
@Bot.on_message(filters.private & (filters.photo | filters.text))
async def payment_proof_handler(client, message):
    user_id = message.from_user.id
    is_waiting = await db_is_payment_pending(user_id)  # True = user pressed Send Screenshot

    if not is_waiting:
        return  # Ignore normal user messages

    # Reset flag after proof received
    await db_set_payment_pending(user_id, False)

    caption = f"üì© Payment proof from user: <code>{user_id}</code>"
    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton("Confirm ‚úÖ", callback_data=f"confirm_{user_id}")],
        [InlineKeyboardButton("Reject ‚ùå", callback_data=f"reject_{user_id}")]
    ])

    # Send proof to all admins
    for admin in ADMINS:
        if message.photo:
            await client.send_photo(
                admin,
                photo=message.photo.file_id,
                caption=caption,
                reply_markup=buttons,
                parse_mode="HTML"
            )
        else:
            full_caption = f"{caption}\n\nüìù Message:\n{message.text}"
            await client.send_message(
                admin,
                full_caption,
                reply_markup=buttons,
                parse_mode="HTML"
            )

    await message.reply("‚úÖ Payment proof admin ‡§ï‡•ã ‡§≠‡•á‡§ú ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ response ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§")
